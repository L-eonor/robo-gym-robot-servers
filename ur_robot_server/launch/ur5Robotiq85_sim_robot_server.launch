<?xml version="1.0" ?>
<launch>
  <arg name="gui" default="false" />
  <arg name="rviz_gui" default="true" />
  <arg name="gazebo_gui" default="false" />
  <arg name="world_path" default = "$(find ur_robot_server)/worlds" />
  <arg name="world_name" default="empty.world"/>
  <arg name="world" value ="$(arg world_path)/$(arg world_name)"/>
  <arg name="max_velocity_scale_factor" default="1.0" doc="Scale factor multplied by maximum joint velocity value"/>
  <arg name="server_port" default ="50051"/>
  <arg name="action_cycle_rate" default="25" doc="Rate at which new commands are published to the robot controller"/>
  <arg name="obstacle_controller" default="false"  doc="Start obstacle controller node"/>
  <arg name="reference_frame" default="base"  doc="Reference frame with respect to which target and ee pose are given"/>
  <arg name="target_mode" default="fixed"  doc="fixed, moving"/>
  <arg name="target_model_name" default="box100"  doc="Gazebo model name of the target object"/>
  <arg name="rviz_config_path" default = "$(find ur_robot_server)/rviz" />
  <arg name="rviz_config_file" default="ur_sim_rl.rviz" doc="RViz configuration file"/>
  <arg name="rviz_config" value="$(arg rviz_config_path)/$(arg rviz_config_file)"/>

  <!-- Robot Base position -->
  <arg name="x" default="0.0" doc="base_link coordinate with respect to the world frame"/>
  <arg name="y" default="0.0" doc="base_link coordinate with respect to the world frame"/>
  <arg name="z" default="0.1" doc="base_link coordinate with respect to the world frame"/>
  <arg name="roll" default="0.0" doc="base_link coordinate with respect to the world frame"/>
  <arg name="pitch" default="0.0" doc="base_link coordinate with respect to the world frame"/>
  <arg name="yaw" default="0.0" doc="base_link coordinate with respect to the world frame"/>

   <!--Robot description and related parameter files -->
  <arg name="robot_description_file" default="$(dirname)/inc/Robotiq85/load_ur5Robotiq85.launch.xml" doc="Launch file which populates the 'robot_description' parameter."/>
  <arg name="joint_limit_params" default="$(find ur_description)/config/ur5/joint_limits.yaml"/>
  <arg name="kinematics_params" default="$(find ur_description)/config/ur5/default_kinematics.yaml"/>
  <arg name="physical_params" default="$(find ur_description)/config/ur5/physical_parameters.yaml"/>
  <arg name="visual_params" default="$(find ur_description)/config/ur5/visual_parameters.yaml"/>

  <!-- Controller configuration -->
  <arg name="controller_config_file" default="$(find ur_robot_server)/config/ur5_controllers.yaml" doc="Config file used for defining the ROS-Control controllers."/>
  <arg name="controllers" default="joint_state_controller gripper_controller eff_joint_traj_controller" doc="Controllers that are activated by default."/>
  <arg name="stopped_controllers" default="joint_group_eff_controller" doc="Controllers that are initally loaded, but not started."/>

  <!-- Load urdf on the parameter server -->
  <include file="$(arg robot_description_file)">
    <arg name="joint_limit_params" value="$(arg joint_limit_params)"/>
    <arg name="kinematics_params" value="$(arg kinematics_params)"/>
    <arg name="physical_params" value="$(arg physical_params)"/>
    <arg name="visual_params" value="$(arg visual_params)"/>
    <arg name="x" value="$(arg x)"/>
    <arg name="y" value="$(arg y)"/>
    <arg name="z" value="$(arg z)"/>
    <arg name="roll" value="$(arg roll)"/>
    <arg name="pitch" value="$(arg pitch)"/>
    <arg name="yaw" value="$(arg yaw)"/>
  </include>

  <!-- Robot state publisher -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="125" />
    <param name="tf_prefix" value="" />
  </node>

  <!-- Start the 'driver' (ie: Gazebo in this case) -->
  <include file="$(dirname)/inc/ur_control.launch.xml">
    <arg name="controller_config_file" value="$(arg controller_config_file)"/>
    <arg name="controllers" value="$(arg controllers)"/>
    <arg name="gui" value="$(eval arg('gui') and arg('gazebo_gui'))"/>
    <arg name="paused" value="false"/>
    <arg name="stopped_controllers" value="$(arg stopped_controllers)"/>
    <arg name="gazebo_world" value="$(arg world)"/>
  </include>

  <!-- Launch Command Handler  -->
  <node name="joint_trajectory_command_handler" pkg="ur_robot_server" type="joint_trajectory_command_handler.py" respawn="false" output="screen" >
    <param name="real_robot" value="false" />
    <param name="action_cycle_rate" value="$(arg action_cycle_rate)"></param>
  </node>


  <!-- Launch RViz -->
  <node if="$(eval arg('gui') and arg('rviz_gui'))" name="$(anon rviz)" pkg="rviz" type="rviz" respawn="false"
  args="-d $(arg rviz_config)" output="screen">
  </node>

  <!--Launch gRPC server -->
  <node name="robot_server" pkg="ur_robot_server" type="robot_server.py" respawn="false" output="screen" >
    <param name="server_port" value="$(arg server_port)"></param>
    <param name="real_robot" value="false"></param>
    <param name="ur_model" value="ur5"></param>
    <param name="max_velocity_scale_factor" value="$(arg max_velocity_scale_factor)"></param>
    <param name="action_cycle_rate" value="$(arg action_cycle_rate)"></param>
    <param name="obstacle_controller" value="$(arg obstacle_controller)"></param>
    <param name="reference_frame" value="$(arg reference_frame)"></param>
    <param name="target_mode" value="$(arg target_mode)"></param>
    <param name="target_model_name" value="$(arg target_model_name)"></param>
  </node>

  <!--Launch obstacle controller -->
  <node if="$(arg obstacle_controller)" name="obstacle_controller" pkg="ur_robot_server" type="obstacles_controller.py" respawn="false" output="screen" >
  </node>

</launch>
